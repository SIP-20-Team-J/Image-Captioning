# -*- coding: utf-8 -*-
"""Caption_this.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Za75ZcjtP6XpL8EWUM4YrRf0z6iK56qm
"""
import numpy as np
#import pandas as pd
#import matplotlib.pyplot as plt
import keras
#import string
from PIL import Image
import pickle
from keras.applications.resnet50 import ResNet50, preprocess_input
from keras.preprocessing import image
from keras.models import Model, load_model
from keras.preprocessing.sequence import pad_sequences
import tensorflow as tf


model = load_model("model_9.h5")

#model._make_predict_function()
model_temp = ResNet50(weights="imagenet", input_shape=(224,224,3))

model_resnet= Model(model_temp.input, model_temp.layers[-2].output )
#model_resnet._make_predict_function()

def preprocess_image(img):
    img = image.load_img(img, target_size=(224,224))
    img = image.img_to_array(img)
    img = np.expand_dims(img, axis=0)
   # img = image.reshape((1, img.shape[0], img.shape[1], img.shape[2]))
    img = preprocess_input(img)
    return img

def encode_image(img):
    img = preprocess_image(img)
    feature_vector = model_resnet.predict(img)
    feature_vector = feature_vector.reshape(1,feature_vector.shape[1])
    return feature_vector





with open('word_to_idx.pkl', 'rb') as W2I:
  word_to_idx= pickle.load(W2I)

with open('idx_to_word.pkl', 'rb') as I2W:
  idx_to_word= pickle.load(I2W)



def predict_caption(photo):
    in_text = "startseq"
    max_length=34
    for i in range(max_length):
        sequence = [word_to_idx[w] for w in in_text.split() if w in word_to_idx]
        sequence = pad_sequences([sequence], maxlen=max_length, padding='post')

        ypred =  model.predict([photo,sequence])
        ypred = ypred.argmax()
        word = idx_to_word[ypred]
        in_text+= ' ' +word
        
        if word =='endseq':
            break
       
        
    final_caption =  in_text.split()
    final_caption = final_caption[1:-1]
    final_caption = ' '.join(final_caption)
    
    return final_caption


def caption_image(image):
    encode= encode_image(image)

    caption=predict_caption(encode)

    return caption

